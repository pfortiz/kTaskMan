#!/usr/bin/perl

# This is a general purpose script to create a list of commands, based on a
# template file and a list of dates in which it needs to be applied
# The template can contain two patterns:
#     DATEDIR  in which each date is represented as YYYY/MM/DD
#     DATEDAY  in which each date is represented as YYYY-MM-DD
#
# The reason to do this is to save time when commands need to be executed
# for a series of days
#
# Author: Patricio F. Ortiz
# Date:   January 17, 2020
#



use Time::Local;
use Date::Parse;

# no strict, I need black magic
# use strict;

# inclusions to deal with time functions. I need to know the number of days
# in a calendar month, and that depends on whether the year is leap or normal
#

my $packagePath;
my %apDict;

BEGIN{ 
    my @parts = split(/\//, $0);
    pop @parts;
    my $myPath = join("/", @parts);
    $packagePath = $myPath;
    print "# PackagePack: $packagePath\n";
}

use lib "$packagePath";
use ap_timex;
use ap_system_dependencies;
use ap_predef;

%apDict = &getFromRc($rcfile);
foreach $_ (keys %apDict){
    $$_ = $apDict{$_};
}


$waitTime = 60; # sleep time of 1 minute

my @monthsInWords = qw(nothing January February March April May June July August September October November December);

my $scripto = $0;
my @parts = split(/\//, $0);
my $me = pop(@parts);
my $farg = @ARGV[0];
my $ppath = join('/', @parts);
#print "I am $0 (a.k.a. $me)\n";
#print "I live in $ppath\n";

%specialDates = &getValidIntervals();

if($#ARGV < 1){
#    foreach $_ (keys %apDict){ print "A-P dictionary: $_ $apDict{$_}\n"; }
#    print "Usage:  $me -init\n";
#    print "Usage:  $me -createStubs\n";
#
#   Note that extraDim as defined in the command line affects all tasks.
    print <<"USAGE";
Usage:  $me pattern-file date-definitions filter

date-definitions take the form: YYYY-MM-DD[:YYYY-MM-DD] or other forms of
date ranges. Use "test_dateString" to explore all possibilities

filter can be:
    fdom : first_of_month
    ldom : last_of_month

date-definitions can also be:
USAGE
    foreach $k (sort keys %specialDates){
#        print "FLL\t$k\n";
        if($specialDates{$k} == 1){ # only main words are listed here
            print "\t$k\n";
        }
    }
    exit;
}

$killMe = "./kill_$me";
print "# Kill me: $killMe\n";
$Iam = $$;
open(K, ">$killMe");
print K "# use: bash $killMe\n";
print K "kill -9 $Iam\n";
close(K);

@argos = @ARGV;
$cwd = `pwd`;

$site = $apDict{"site"};
$memoryFail = $apDict{"memError"};
$walltimeFail = $apDict{"wtError"};
if($memoryFail eq ""){
    $memoryFail = "Cannot allocate memory";
}
$qquery = $apDict{"qquery"};

$dummyRun =0;
$sequential =0;
$i = 0;
foreach $_ (@argos){
    if($_ eq "-dummyRun"){
        $dummyRun = 1;
        undef $argos[$i];
    } elsif ($_ eq "-sequential"){
        $sequential = 1;
        undef $argos[$i];
    }
    $i++;
}

#$tmFile = shift(@ARGV);
#$datesToProcess  = shift(@ARGV);
#$extraDim = shift(@ARGV);

$tmFile = shift(@argos);
$datesToProcess  = shift(@argos);
$filter = shift(@argos);
if($filter eq ""){
    $filter = "evdy";
}

if(!-e $tmFile){
    print "$basePath $pipeName\n";
    die "$tmFile does not exist. Dying...\n";
}
$isSpecial = $specialDates{$datesToProcess};
print STDERR "# isSpecial: $datesToProcess $isSpecial\n";

if($isSpecial ne ""){
    @LISTOFDATES = &getSpecialDates($datesToProcess, $filter);
    ($utcAt0000, $nSecsFromMidnight) = &getUTCat00();
    $uTracer = "_${nSecsFromMidnight}_$Iam";
} else {
    @LISTOFDATES = &getListOfDates($datesToProcess, $filter);
    $uTracer = "";
}

open(H, "<$tmFile");
%definitions = {};
while(<H>){
    if($_ eq "\n"){ next; }
    if(/^DEF:/){
        print STDERR "# a definition: $_";
        @pd = split();
        $word = $pd[1];
        $value = $pd[2];
        print STDERR "# b definition: $word=$value\n";
        $definitions{$word} = $value;
    } elsif(/^#/){
        
    } else {
        push @lines, $_;
    }
}
close(H);


# 2020-01-08 ready to go, with the dates at hand, we just need to issue the
# commands


foreach $dateDay (@LISTOFDATES){
    print "# Processing $dateDay\n";
    $dateDir = $dateDay;
    @parts = split(/-/, $dateDay);
    $leMonth = "$parts[0]-$parts[1]";
    $leMonthDir = "$parts[0]/$parts[1]";
    $underMonth = "$parts[0]_$parts[1]";
    $dateDir =~ s/-/\//g;
    $dateJour = $dateDay;
    $dateJour =~ s/-/_/g;
    $definitions{"DATEDIR"} = $dateDir;
    $definitions{"DATEDAY"} = $dateDay;
    $definitions{"UNDERDAY"} = $dateJour;
    $definitions{"LEMONTH"} = $leMonth;
    $definitions{"MONTHLYDIR"} = $leMonthDir;
    $definitions{"UNDERMONTH"} = $underMonth;
#    foreach $l (@lines){
#        $s = $l;
#        $s =~ s/DATEDAY/$dateDay/g;
#        $s =~ s/DATEDIR/$dateDir/g;
#        print $s;
#    }
    foreach $l (@lines){
        $s = $l;
        foreach $defi (keys %definitions){
            $val  = $definitions{$defi};
            $s =~ s/$defi/$val/g;
#        $s =~ s/DATEDAY/$dateDay/g;
#        $s =~ s/DATEDIR/$dateDir/g;
        }
        print $s;
    }
}
exit;


